@page "/fetchdata"
@using System.Threading
@using BlazorApp1.Data
@inject WeatherForecastService ForecastService
@inject ContextFactory Factory
@inherits OwningComponentBase<SampleContext>
<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>
<button @onclick="Fetch">Fetch Again</button>
<button @onclick="CancelAndFetch">Cancel &amp; Fetch</button>
<button @onclick="FactoryFetch">Factory Fetch</button>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }

    private async void Fetch()
    {
        forecasts = null;
        await Service.LongTask();
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        await InvokeAsync(StateHasChanged);
    }

    private CancellationTokenSource _tokenSource;
    private async void CancelAndFetch()
    {
        forecasts = null;
        _tokenSource?.Cancel();
        _tokenSource = new CancellationTokenSource();
        var tokenSource = _tokenSource;
        await Service.LongTask(tokenSource.Token);
        if (tokenSource.IsCancellationRequested) return;
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        await InvokeAsync(StateHasChanged);
    }

    private int _threadId = 0;
    private async void FactoryFetch()
    {
        _threadId += 1;
        var id = _threadId;

        var ctx = Factory.Generate();
        forecasts = null;
        await ctx.LongTask();
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        ctx.Dispose();
        if (_threadId == id)
        {
            _threadId = 0;
            await InvokeAsync(StateHasChanged);
        }
    }
}
